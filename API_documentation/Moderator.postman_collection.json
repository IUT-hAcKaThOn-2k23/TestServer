{
	"info": {
		"_postman_id": "fb3d3afe-baaf-47e6-867e-fe8f48d06eb8",
		"name": "Moderator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get OTP to register Moderator",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/moderator/getOTP",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"moderator",
						"getOTP"
					]
				},
				"description": "This POST API gets an OTP so that it can be sent through a secured medium to the expected moderator. The moderator will then use this OTP to use it as a key to sign in.\n\nThis is a post API cause it stores the OTP in the database to verify later."
			},
			"response": []
		},
		{
			"name": "OTP verification",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"otp\":\"7645\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/moderator/verifyOTP",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"moderator",
						"verifyOTP"
					]
				},
				"description": "This API verifies the OTP\n\n**Request body**\n\n*   \"otp\" : send the OTP received from the user.\n    \n\n###### Before sending the request, please send the request **Get OTP to register moderator** to get an OTP to test this API\n\nThe API then checks if the OTP is in the database.\n\n1.  IF EXISTS and IF WITHIN TIME: The API returns *OTP verified*\n2.  IF EXISTS and IF NOT WITHIN **24 hours** : The API returns *OTP expired*\n3.  IF DOESNT EXIST : The API returns *OTP not verified*\n    \n\nAn OTP will be removed after successful verification."
			},
			"response": []
		},
		{
			"name": "moderator Signup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Wanda 4\",\r\n    \"mail\":\"14@gmail.com\",\r\n    \"password\":\"123\",\r\n    \"invitedBy\":\"13@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/moderator/signUp",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"moderator",
						"signUp"
					]
				},
				"description": "This API opens a moderator account.\n\nOpening a moderator account is tricky**.**\n\n#### To open a moderator account the developer should first send the OTP generated by *Get OTP to register moderator* to the person inviting the to be moderator. The current moderator then will send the OTP to the to be moderator by secure means. Then the to be moderator should verify his OTP by the *OTP verification* API. Only after a successful verification, any one can access this API. Now these constraint should be applied by the front end developers\n\n*   At first set up a secret environment variable in your .env folder named ADMINPASS.\n*   Then send that as the\n    \n\n> invitedBy = admin\n\nThis will create an account without any invitation\n\n*   By default there are 3 invitation. It is hard coded. So you can change it by going thorough the api codes.\n*   Then create another account with the invitation of previously created account.\n    \n\nYou will get the created moderator object back if the request is successful. The person who invited his invitation count will decrease.\n\nThe API will return-\n\n> email already exists\n\nIf the account with the corresponding mail already opened.\n\n> invitation email does not exist\n\nIf the invitation mail is invalid or the invitation mail doesn't have any remaining invitation."
			},
			"response": []
		},
		{
			"name": "Moderator Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"14@gmail.com\",\r\n    \"password\":\"123\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/moderator/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"moderator",
						"login"
					]
				},
				"description": "This API logs in the moderator.\n\nSimply send the body mentioned below.\n\nThe API will set a header field named *auth-token* to use it for verification and protected routes."
			},
			"response": []
		},
		{
			"name": "Moderator updates post",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "auth-token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyN2I2NmExNzJjOTNlNGI0NGY2MDNhZCIsIm5hbWUiOiJXYW5kYSA0IiwiZW1haWwiOiIxNEBnbWFpbC5jb20iLCJpYXQiOjE2NTI0MzIyNDV9.D8NDRVgZ85v6J0uWgdebTLKbsjBqnTOhgwNzXTdExGI",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"62781f857164a70c06521c1b\",\r\n    \"content\":\"updated by the moderator\",\r\n    \"tags\":[\"fiction\",\"music\"]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/moderator/updatePost",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"moderator",
						"updatePost"
					]
				},
				"description": "This API is used to update any user's post by the moderators.\n\nThe moderators of this blog has the permission to edit any blog's content and the tags. He doesn't have the permission to edit any blogs title.\n\nCheck the body of the request to know what to send as request.\n\nThis is a protected route. So add the extra header before sending the request. You can get a valid auth token by logging in 1st as moderator."
			},
			"response": []
		},
		{
			"name": "Moderator Deleting a post",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "auth-token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyN2I2NmExNzJjOTNlNGI0NGY2MDNhZCIsIm5hbWUiOiJXYW5kYSA0IiwiZW1haWwiOiIxNEBnbWFpbC5jb20iLCJpYXQiOjE2NTI0MzY5Mzh9.7MdrnAMS1YUYPEJHPAgDYeSJgUUXuKAkULrHAP32Wdg",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":\"626f0f0a8442dc636775c601\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/moderator/deleteReq",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"moderator",
						"deleteReq"
					]
				},
				"description": "This API deletes enables moderator to delete a post\n\nDeleting a post without the concern of the actual creator can be tricky.\n\n**To delete a blog without the permission of the creator, 3 or more different moderators need to agree to delete the post.**\n\nTo delete a post,\n\n*   Send the required post id as `id` with in the body.\n*   If the delete request for that post is les then 3, then the count will be updated. A msg will be sent \"request sent\"\n*   If the count is already 3+ then the post will be deleted\n*   If the post is not found then it will send a msg \"post already deleted\""
			},
			"response": []
		}
	]
}